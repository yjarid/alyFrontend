{"version":3,"sources":["components/Register/Forms/LoginForm.js","components/Register/Login.js"],"names":["LoginForm","login","LogFormik","loading","withFormik","mapPropsToValues","email","password","validationSchema","Yup","shape","required","min","max","handleSubmit","values","setSubmitting","setFieldError","variables","errors","touched","isSubmitting","className","styles","topContainer","title","innerContainer","disabled","type","name","label","note","to","Login","props","appDispatch","useContext","DispatchContext","parsed","queryString","parse","location","search","useEffect","confirm","value","message","useMutation","LOGIN","onCompleted","setAccessToken","token","userId","user","_id","history","push","onError","error","errMessage","replace","Page","withTopBar","Spinner"],"mappings":"mMA8DeA,EAvDG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAkCbC,GAlCkC,EAAdC,QAkCRC,YAAW,CAC3BC,iBAD2B,YAEzB,MAAO,CACLC,MAFkC,EAAnBA,OAEC,GAChBC,SAHkC,EAAZA,UAGA,KAI1BC,iBAAkBC,WAAaC,MAAM,CACnCJ,MAAOG,WAAaH,MAAM,mBAAmBK,SAAS,qBACtDJ,SAAUE,WAAaG,IAAI,EAAG,2CAA2CC,IAAI,GAAI,wCAAwCF,SAAS,0BAGpIG,aAAc,SAACC,EAAD,GAA8C,EAAnCC,cAAmC,EAApBC,cACtChB,EAAM,CAAEiB,UAAWH,MAdLX,EAjCH,SAAC,GAA8C,EAA5CW,OAA4C,EAApCI,OAAoC,EAA5BC,QAA4B,EAAnBC,aACzC,OACE,yBAAKC,UAAWC,IAAOC,cACrB,yBAAKF,UAAU,aACb,wBAAIA,UAAWC,IAAOE,OAAtB,SACA,kBAAC,IAAD,KACE,yBAAKH,UAAWC,IAAOG,gBACrB,6BACE,kBAAC,IAAD,CAAaC,UAAU,EAAOC,KAAK,QAAQC,KAAK,QAAQC,MAAM,gBAEhE,6BACE,kBAAC,IAAD,CAAaH,UAAU,EAAOC,KAAK,WAAWC,KAAK,WAAWC,MAAM,mBAGtE,kBAAC,IAAD,CAAUF,KAAK,UAAf,WAGJ,yBAAKN,UAAWC,IAAOQ,MACrB,iDAEE,gCACE,kBAAC,OAAD,CAAMC,GAAG,aAAT,gBAGJ,2BACE,kBAAC,OAAD,CAAMA,GAAG,kBAAT,6BA0BZ,OAAO,kBAAC9B,EAAD,O,mEChDM,SAAS+B,EAAMC,GAC5B,IAAMC,EAAcC,qBAAWC,KACzBC,EAASC,IAAYC,MAAMN,EAAMO,SAASC,QAEhDC,qBAAU,WACJL,GACEA,EAAOM,SACTT,EAAY,CAAEP,KAAM,eAAgBiB,MAAO,CAAEC,QAAS,qCAAsClB,KAAM,eAGrG,IAVgC,MAYCmB,YAAYC,IAAO,CACrDC,YADqD,YAC7B,IAAVhD,EAAS,EAATA,MACZiD,YAAejD,EAAMkD,OACrBhB,EAAY,CAAEP,KAAM,eAAgBiB,MAAO,CAAEC,QAAS,mBAAoBlB,KAAM,aAChFO,EAAY,CAAEP,KAAM,QAASiB,MAAO,CAAEO,OAAQnD,EAAMoD,KAAKC,IAAK1B,KAAM3B,EAAMoD,KAAKzB,QAC/EM,EAAMqB,QAAQC,KAAK,MAErBC,QAPqD,SAO7CC,GACN,IAAMC,EAAaD,EAAMZ,QAAQc,QAAQ,iBAAkB,IAC3DzB,EAAY,CAAEP,KAAM,eAAgBiB,MAAO,CAAEC,QAASa,EAAY/B,KAAM,cArBzC,mBAY5B3B,EAZ4B,YAYnBE,EAZmB,EAYnBA,QAZmB,EAYVuD,MAazB,OACE,kBAACG,EAAA,EAAD,CAAMpC,MAAM,YAAYqC,YAAY,GAClC,kBAAC,EAAD,CAAW7D,MAAOA,IACjBE,GAAW,kBAAC4D,EAAA,EAAD,O","file":"static/js/16.ea2ff135.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport styles from \"./Register.module.scss\"\r\nimport { MyTextField, MyButton } from \"../../UI/CustomFields/CustomField\"\r\nimport { withFormik, Form } from \"formik\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst LoginForm = ({ login, loading }) => {\r\n  const myForm = ({ values, errors, touched, isSubmitting }) => {\r\n    return (\r\n      <div className={styles.topContainer}>\r\n        <div className=\"container\">\r\n          <h1 className={styles.title}>Login</h1>\r\n          <Form>\r\n            <div className={styles.innerContainer}>\r\n              <div>\r\n                <MyTextField disabled={false} type=\"email\" name=\"email\" label=\"Your Email\" />\r\n              </div>\r\n              <div>\r\n                <MyTextField disabled={false} type=\"password\" name=\"password\" label=\"Your Password\" />\r\n              </div>\r\n\r\n              <MyButton type=\"submit\">Login</MyButton>\r\n            </div>\r\n          </Form>\r\n          <div className={styles.note}>\r\n            <p>\r\n              not a menber please\r\n              <strong>\r\n                <Link to=\"/register\"> Register </Link>\r\n              </strong>\r\n            </p>\r\n            <p>\r\n              <Link to=\"/resetPassword\"> Forgot Password </Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const LogFormik = withFormik({\r\n    mapPropsToValues({ email, password }) {\r\n      return {\r\n        email: email || \"\",\r\n        password: password || \"\"\r\n      }\r\n    },\r\n\r\n    validationSchema: Yup.object().shape({\r\n      email: Yup.string().email(\"Email not valid\").required(\"Email is required\"),\r\n      password: Yup.string().min(6, \"Password must be 6 characters or longer\").max(30, \"name should be at most 30 characters\").required(\"Password is required\")\r\n    }),\r\n\r\n    handleSubmit: (values, { setSubmitting, setFieldError }) => {\r\n      login({ variables: values })\r\n    }\r\n  })(myForm)\r\n\r\n  return <LogFormik />\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useEffect, useState, useContext } from \"react\"\r\nimport { useMutation } from \"@apollo/react-hooks\"\r\nimport LoginForm from \"./Forms/LoginForm\"\r\nimport { setAccessToken } from \"../../AccessToken\"\r\nimport FlashMessage from \"../UI/FlashMessage/FlashMessage\"\r\nimport Spinner from \"../UI/Spinner/Spinner\"\r\nimport queryString from \"query-string\"\r\nimport { LOGIN } from \"../../qraphQl/userType\"\r\nimport { DispatchContext } from \"../../Context\"\r\nimport Page from \"../Page/Page\"\r\n\r\nexport default function Login(props) {\r\n  const appDispatch = useContext(DispatchContext)\r\n  const parsed = queryString.parse(props.location.search)\r\n\r\n  useEffect(() => {\r\n    if (parsed) {\r\n      if (parsed.confirm) {\r\n        appDispatch({ type: \"flashMessage\", value: { message: \"Your acount is active please Login\", type: \"success\" } })\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  const [login, { loading, error }] = useMutation(LOGIN, {\r\n    onCompleted({ login }) {\r\n      setAccessToken(login.token)\r\n      appDispatch({ type: \"flashMessage\", value: { message: \"Login successful\", type: \"success\" } })\r\n      appDispatch({ type: \"login\", value: { userId: login.user._id, type: login.user.type } })\r\n      props.history.push(\"/\")\r\n    },\r\n    onError(error) {\r\n      const errMessage = error.message.replace(\"GraphQL error:\", \"\")\r\n      appDispatch({ type: \"flashMessage\", value: { message: errMessage, type: \"error\" } })\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Page title=\"Loging In\" withTopBar={true}>\r\n      <LoginForm login={login} />\r\n      {loading && <Spinner />}\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}