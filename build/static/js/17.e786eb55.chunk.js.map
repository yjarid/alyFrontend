{"version":3,"sources":["components/Register/Forms/RegisterForm.js","components/Register/Register.js"],"names":["RegisterForm","register","RegFormik","loading","withFormik","mapPropsToValues","userName","email","password","validationSchema","Yup","shape","min","max","required","handleSubmit","values","console","log","variables","errors","touched","isSubmitting","className","styles","topContainer","title","innerContainer","disabled","name","label","type","note","to","Register","appDispatch","useContext","DispatchContext","useMutation","REGISTER","onCompleted","createUser","value","message","onError","error","errMessage","replace","Page","withTopBar","Spinner"],"mappings":"2MAiEeA,EA1DM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAmChBC,GAnCwC,EAAdC,QAmCdC,YAAW,CAC3BC,iBAD2B,YAEzB,MAAO,CACLC,SAF4C,EAA7BA,UAEO,GACtBC,MAH4C,EAAnBA,OAGT,GAChBC,SAJ4C,EAAZA,UAIV,KAI1BC,iBAAkBC,WAAaC,MAAM,CACnCL,SAAUI,WAAaE,IAAI,EAAG,wCAAwCC,IAAI,GAAI,wCAAwCC,SAAS,oBAC/HP,MAAOG,WAAaH,MAAM,mBAAmBO,SAAS,qBACtDN,SAAUE,WAAaE,IAAI,EAAG,2CAA2CC,IAAI,GAAI,wCAAwCC,SAAS,0BAEpIC,aAAc,SAAAC,GACZC,QAAQC,IAAIF,GACZf,EAAS,CAAEkB,UAAWH,MAhBRZ,EAlCH,SAAC,GAA8C,EAA5CY,OAA4C,EAApCI,OAAoC,EAA5BC,QAA4B,EAAnBC,aACzC,OACE,yBAAKC,UAAWC,IAAOC,cACrB,yBAAKF,UAAU,aACb,wBAAIA,UAAWC,IAAOE,OAAtB,gBACA,kBAAC,IAAD,KACE,yBAAKH,UAAWC,IAAOG,gBACrB,6BACE,kBAAC,IAAD,CAAaC,UAAU,EAAOC,KAAK,WAAWC,MAAM,eAGtD,6BACE,kBAAC,IAAD,CAAaF,UAAU,EAAOG,KAAK,QAAQF,KAAK,QAAQC,MAAM,gBAGhE,6BACE,kBAAC,IAAD,CAAaF,UAAU,EAAOG,KAAK,WAAWF,KAAK,WAAWC,MAAM,cAGtE,kBAAC,IAAD,CAAUC,KAAK,UAAf,cAIJ,uBAAGR,UAAWC,IAAOQ,MAArB,0BAC0B,IACxB,gCACE,kBAAC,OAAD,CAAMC,GAAG,UAAT,YACQ,WA2BpB,OAAO,kBAAC/B,EAAD,O,gCCrDM,SAASgC,IACtB,IAAMC,EAAcC,qBAAWC,KADE,EAGDC,YAAYC,IAAU,CACpDC,YADoD,YACvB,IAAfC,EAAc,EAAdA,WACRA,GACFN,EAAY,CAAEJ,KAAM,eAAgBW,MAAO,CAAEC,QAAQ,SAAD,OAAWF,EAAWnC,SAAtB,8CAA4EyB,KAAM,cAG1Ia,QANoD,SAM5CC,GACN5B,QAAQC,IAAI2B,GACZ,IAAMC,EAAaD,EAAMF,QAAQI,QAAQ,iBAAkB,IAC3DZ,EAAY,CAAEJ,KAAM,eAAgBW,MAAO,CAAEC,QAASG,EAAYf,KAAM,cAZ3C,mBAG1B9B,EAH0B,KAGdE,EAHc,KAGdA,QAanB,OACE,kBAAC6C,EAAA,EAAD,CAAMtB,MAAM,eAAeuB,YAAY,GACrC,kBAAC,EAAD,CAAchD,SAAUA,EAAUE,QAASA,IAC1CA,GAAW,kBAAC+C,EAAA,EAAD,O","file":"static/js/17.e786eb55.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport styles from \"./Register.module.scss\"\r\nimport { withFormik, Form } from \"formik\"\r\nimport { MyTextField, MyButton } from \"../../UI/CustomFields/CustomField\"\r\nimport * as Yup from \"yup\"\r\n\r\nconst RegisterForm = ({ register, loading }) => {\r\n  const myForm = ({ values, errors, touched, isSubmitting }) => {\r\n    return (\r\n      <div className={styles.topContainer}>\r\n        <div className=\"container\">\r\n          <h1 className={styles.title}>Registration</h1>\r\n          <Form>\r\n            <div className={styles.innerContainer}>\r\n              <div>\r\n                <MyTextField disabled={false} name=\"userName\" label=\"Your Name\" />\r\n              </div>\r\n\r\n              <div>\r\n                <MyTextField disabled={false} type=\"email\" name=\"email\" label=\"Your Email\" />\r\n              </div>\r\n\r\n              <div>\r\n                <MyTextField disabled={false} type=\"password\" name=\"password\" label=\"Password\" />\r\n              </div>\r\n\r\n              <MyButton type=\"submit\">Register</MyButton>\r\n            </div>\r\n          </Form>\r\n\r\n          <p className={styles.note}>\r\n            Already a Member please{\" \"}\r\n            <strong>\r\n              <Link to=\"/login\"> Login </Link>\r\n            </strong>{\" \"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const RegFormik = withFormik({\r\n    mapPropsToValues({ userName, email, password }) {\r\n      return {\r\n        userName: userName || \"\",\r\n        email: email || \"\",\r\n        password: password || \"\"\r\n      }\r\n      // connect()\r\n    },\r\n    validationSchema: Yup.object().shape({\r\n      userName: Yup.string().min(4, \"name should be at least 4 characters\").max(16, \"name should be at most 16 characters\").required(\"Name is required\"),\r\n      email: Yup.string().email(\"Email not valid\").required(\"Email is required\"),\r\n      password: Yup.string().min(6, \"Password must be 6 characters or longer\").max(30, \"name should be at most 30 characters\").required(\"Password is required\")\r\n    }),\r\n    handleSubmit: values => {\r\n      console.log(values)\r\n      register({ variables: values })\r\n    }\r\n  })(myForm)\r\n\r\n  return <RegFormik />\r\n}\r\n\r\nexport default RegisterForm\r\n","import React, { useContext } from \"react\"\r\nimport { useMutation } from \"@apollo/react-hooks\"\r\nimport gql from \"graphql-tag\"\r\nimport RegisterForm from \"./Forms/RegisterForm\"\r\nimport Spinner from \"../UI/Spinner/Spinner\"\r\nimport { REGISTER } from \"../../qraphQl/userType\"\r\nimport { DispatchContext } from \"../../Context\"\r\nimport Page from \"../Page/Page\"\r\n\r\nexport default function Register() {\r\n  const appDispatch = useContext(DispatchContext)\r\n\r\n  const [register, { loading }] = useMutation(REGISTER, {\r\n    onCompleted({ createUser }) {\r\n      if (createUser) {\r\n        appDispatch({ type: \"flashMessage\", value: { message: `hello ${createUser.userName} Check your email to activate your account`, type: \"success\" } })\r\n      }\r\n    },\r\n    onError(error) {\r\n      console.log(error)\r\n      const errMessage = error.message.replace(\"GraphQL error:\", \"\")\r\n      appDispatch({ type: \"flashMessage\", value: { message: errMessage, type: \"error\" } })\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Page title=\"Registration\" withTopBar={true}>\r\n      <RegisterForm register={register} loading={loading} />\r\n      {loading && <Spinner />}\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}